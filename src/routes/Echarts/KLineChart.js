import React from 'react';
import { Card, Icon } from 'antd';
import Highlight from 'react-highlight';
import { KLineChart } from '../../components/src';
import Basic from '../Layout/WDBasic';

export default class KLineChartShow extends Basic {
  onTooltipFormat(params) {
    console.log(params);
  }

  onChartClick(params, echart) {
    console.log(params, echart);
  }

  calculateMA(dayCount, data) {
    const result = [];
    for (let i = 0, len = data.length; i < len; i++) {
      if (i < dayCount) {
        result.push('-');
      } else {
        let sum = 0;
        for (let j = 0; j < dayCount; j++) {
          sum += data[i - j][1];
        }
        result.push(sum / dayCount);
      }
    }
    return result;
  }

  render() {
    const kData = {
      xdata: ['2015/1/5', '2015/1/6', '2015/1/7', '2015/1/8', '2015/1/9', '2015/1/10', '2015/1/11', '2015/1/12', '2015/1/13', '2015/1/14',
        '2015/1/15', '2015/1/16', '2015/1/17', '2015/1/18', '2015/1/19', '2015/1/20', '2015/1/21', '2015/1/22', '2015/1/23', '2015/1/24',
        '2015/1/25', '2015/1/26', '2015/1/27', '2015/1/28', '2015/1/29', '2015/1/30', '2015/1/31', '2015/2/1', '2015/2/2', '2015/2/3',
        '2015/2/4', '2015/2/5', '2015/2/6', '2015/2/7', '2015/2/8', '2015/2/9', '2015/2/10', '2015/2/11', '2015/2/12', '2015/2/13'],
      ydata: [
        [10452.74, 10409.85, 10367.41, 10554.96, 168890000],
        [10411.85, 10544.07, 10411.85, 10575.92, 221290000],
        [10543.85, 10538.66, 10454.37, 10584.07, 191460000],
        [10535.46, 10529.03, 10432, 10587.55, 225490000],
        [10530.07, 10592.44, 10480.59, 10651.99, 237770000],
        [10589.25, 10458.89, 10420.52, 10603.48, 223250000],
        [10461.55, 10485.18, 10389.85, 10543.03, 197960000],
        [10485.18, 10427.18, 10341.19, 10539.25, 197310000],
        [10428.67, 10538.37, 10426.89, 10573.85, 186280000],
        [10534.52, 10553.85, 10454.52, 10639.03, 260090000],
        [10556.37, 10600.51, 10503.7, 10666.88, 254170000],
        [10601.4, 10528.66, 10447.92, 10676.96, 224300000],
        [10522.77, 10623.62, 10453.11, 10665.7, 214920000],
        [10624.22, 10623.18, 10545.03, 10717.4, 219720000],
        [10625.25, 10568.29, 10490.14, 10691.77, 234260000],
        [10568, 10702.51, 10510.44, 10725.18, 186170000],
        [10701.1, 10609.92, 10579.33, 10748.81, 206560000],
        [10610.07, 10468.37, 10412.44, 10703.25, 247660000],
        [10467.41, 10510.29, 10369.92, 10611.56, 273970000],
        [10510.22, 10488.07, 10385.56, 10551.03, 208990000],
        [10487.78, 10499.18, 10395.55, 10614.44, 224800000],
        [10499.48, 10505.18, 10414.15, 10571.48, 183810000],
        [10503.11, 10470.74, 10394.81, 10567.85, 227760000],
        [10469.33, 10495.55, 10399.92, 10566.37, 187810000],
        [10494.89, 10593.03, 10433.7, 10634.81, 182880000],
        [10592, 10579.03, 10433.7, 10634.81, 160720000],
        [10578.74, 10613.85, 10511.18, 10667.03, 160590000],
        [10605.48, 10737.7, 10561.55, 10779.4, 277850000],
        [10735.18, 10694.07, 10636.44, 10775.03, 197560000],
        [10696.22, 10627.85, 10578.66, 10755.47, 208340000],
        [10628.88, 10714.88, 10628.88, 10762.07, 169730000],
        [10706.68, 10671.99, 10623.62, 10764.36, 164370000],
        [10674.59, 10664.73, 10626.44, 10794.95, 219890000],
        [10666.29, 10619.03, 10559.11, 10722.77, 220560000],
        [10619.55, 10609.62, 10508.89, 10711.84, 229950000],
        [10609.55, 10566.37, 10479.33, 10681.4, 225670000],
        [10566.59, 10601.62, 10509.4, 10660.73, 192420000],
        [10598.14, 10580.14, 10493.7, 10652.96, 223230000],
        [10581.55, 10583.92, 10519.03, 10689.55, 200050000],
        [10582.25, 10678.14, 10568.74, 10720.14, 185030000],
      ],
      barData: [
        [0, 168890000, 1],
        [1, 221290000, -1],
        [2, 191460000, 1],
        [3, 225490000, 1],
        [4, 237770000, -1],
        [5, 223250000, 1],
        [6, 197960000, -1],
        [7, 197310000, 1],
        [8, 186280000, -1],
        [9, 260090000, -1],
        [0, 168890000, 1],
        [10, 254170000, -1],
        [11, 224300000, 1],
        [12, 214920000, -1],
        [13, 219720000, 1],
        [14, 234260000, 1],
        [15, 186170000, -1],
        [16, 206560000, 1],
        [17, 247660000, 1],
        [18, 273970000, -1],
        [19, 208990000, 1],
        [20, 224800000, -1],
        [21, 183810000, -1],
        [22, 227760000, 1],
        [23, 187810000, -1],
        [23, 187810000, -1],
        [24, 182880000, -1],
        [25, 160720000, 1],
        [26, 160590000, -1],
        [27, 277850000, -1],
        [28, 197560000, 1],
        [29, 208340000, 1],
        [30, 169730000, -1],
        [31, 164370000, 1],
        [32, 219890000, 1],
        [33, 220560000, 1],
        [34, 229950000, 1],
        [35, 225670000, 1],
        [36, 192420000, -1],
        [37, 223230000, 1],
        [38, 200050000, -1],
        [39, 185030000, -1],
      ],
    };

    const chartSource = [{
      parameter: 'color',
      description: '非必需，自定义节点的颜色数组，按顺序取色',
      type: 'Array',
      defaultValue: "['#2CA51A', '#0BBEFE', '#F8B853', '#EA6C6B', '#8AAAF6', '#4F76D1', '#C1DFFF', '#F7F7F7']",
    }, {
      parameter: 'config',
      description: '必需，配置关系图的数据源等，详见下面Table',
      type: 'Object',
      defaultValue: 'null',
    }, {
      parameter: 'style',
      description: '非必需，设置Chart的宽高等，一般格式{ height: 高度, width: 宽度 }',
      type: 'Object',
      defaultValue: '{ height: 450, width: \'100%\' }',
    }, {
      parameter: 'onEvents',
      description: '非必需，所有的事件交互回调集合，可参考示例代码；一般为点击事件，参数为params及echart实例；事件类型可参考Echarts.events',
      type: 'Object',
      defaultValue: 'null',
    }, {
      parameter: 'onTooltipFormat',
      description: '非必需，自定义提示框浮层内容及样式，传递给父组件，参数有params，具体可参考示例代码或Echarts.tooltip.formatter',
      type: 'Function',
      defaultValue: 'null',
    }];

    const configSource = [{
      parameter: 'x',
      description: '必需，定义x轴数据源，详见下面Table',
      type: 'Array',
      defaultValue: 'null',
    }, {
      parameter: 'y',
      description: '必需，定义y轴数据源及配置，详见下面Table；默认只有一个y轴',
      type: 'Object',
      defaultValue: 'null',
    }, {
      parameter: 'volume',
      description: '非必需，定义下方柱状图数据源及配置（一般用于表示volume），详见下面Table',
      type: 'Object',
      defaultValue: 'null',
    }, {
      parameter: 'dataZoom',
      description: '非必需，用于x轴区域缩放，并可以看到走势概览，默认显示后70%，在x轴数据量大时使用',
      type: 'Object',
      defaultValue: 'null | { start: 30, end: 100 }',
    }, {
      parameter: 'grid',
      description: '非必须，用来控制图标的位置left，right，top，bottom控制上面K线的四周留白，height控制上图高度；barLeft，barRight，barTop，barBottom控制下面柱状图位置，barHeight控制柱状图的高',
      type: 'Array',
      defaultValue: '[{left: 80, right: 10, top: 30, bottom: 10, height: 230 },{left: 80, right: 0, top: 290, bottom: 10, barHeight: 80 }]',
    }];

    const xSource = [{
      parameter: 'data',
      description: '必需，定义x轴数据源，一般为时间序列',
      type: 'Array',
      defaultValue: 'null',
    }, {
      parameter: 'name',
      description: '非必需，定义x轴名称，放于坐标轴右侧',
      type: 'String',
      defaultValue: 'null',
    }];
    const ySource = [{
      parameter: 'kData',
      description: '  必需，定义K线的数据，data里面的每个元素都是一个数组，每个元素至少包含4个数据[open, close, lowest, highest]（即：[开盘值, 收盘值, 最低值, 最高值]）；kData.length=x.data.length，数据中缺省值一般设为null',
      type: 'Array',
      defaultValue: 'null',
    }, {
      parameter: 'lineData',
      description: '非必需，定义MA线的数据，里面的每个元素都是一个数组，表示一条MA的线数据，每个元素的长度=x.data.length；数据中缺省值一般设为null',
      type: 'Array',
      defaultValue: 'null',
    }, {
      parameter: 'legend',
      description: '非必需，定义此y轴上数据的名称，数组元素第一个为kData的name，后面几项依次为lineData的name，每个元素都为String',
      type: 'Array',
      defaultValue: 'null',
    }, {
      parameter: 'position',
      description: '必需, 定义y轴位置，可选left、right',
      type: 'String',
      defaultValue: 'left',
    }, {
      parameter: 'name',
      description: '非必需，此y轴的名称，可将单位也放于此，放于y轴上方',
      type: 'String',
      defaultValue: 'null',
    }];

    const volumeSource = [{
      parameter: 'show',
      description: '非必需，是否显示',
      type: 'Boolean',
      defaultValue: 'false',
    }, {
      parameter: 'data',
      description: '非必需，TODO',
      type: 'Array',
      defaultValue: 'null',
    }];

    const tableConfig = [
      { title: 'KLineChart', subtitle: '', dataSource: chartSource },
      { title: 'config', subtitle: '', dataSource: configSource },
      { title: 'x', subtitle: '', dataSource: xSource },
      { title: 'y', subtitle: '', dataSource: ySource },
      { title: 'volume', subtitle: '', dataSource: volumeSource },
    ];

    return (
      <div>
        <p className="container-header">KLineChart K线图</p>
        <p>k线图，可以同步展示日K线、MA线图等，MA线自定义条数，并支持x轴缩放与鼠标手势缩放</p>
        <p className="container-title">代码示例</p>
        <p>点Title右侧箭头查看代码</p>
        <Card>
          <KLineChart
            config={{
              x: { data: kData.xdata },
              y: {
                kData: kData.ydata,
                lineData: [
                  this.calculateMA(5, kData.ydata),
                  this.calculateMA(10, kData.ydata),
                  this.calculateMA(20, kData.ydata),
                ],
                legend: ['日K', 'MA5', 'MA10', 'MA20'],
              },
            }}
            style={{ height: 450, width: '100%' }}
            onEvents={{ click: this.onChartClick }}
          />
          <hr />
          <p className="sample-title">
            静态基础K线图
            <Icon
              type="arrows-alt"
              title="Show me the code"
              onClick={this.onCodeToggleClick}
            />
          </p>
          <p className="sample-desc">只装载数据，最简化K线图，添加事件交互</p>
          <div className="code-container">
            <Highlight className="JavaScript">{
              `import { KLineChart } from 'deep-viz';

// 创建虚假数据
const kData = {
  xdata: ['2015/1/5', '2015/1/6', '2015/1/7', '2015/1/8', '2015/1/9', '2015/1/10', '2015/1/11', '2015/1/12', '2015/1/13', '2015/1/14',
    '2015/1/15', '2015/1/16', '2015/1/17', '2015/1/18', '2015/1/19', '2015/1/20', '2015/1/21', '2015/1/22', '2015/1/23', '2015/1/24',
    '2015/1/25', '2015/1/26', '2015/1/27', '2015/1/28', '2015/1/29', '2015/1/30', '2015/1/31', '2015/2/1', '2015/2/2', '2015/2/3',
    '2015/2/4', '2015/2/5', '2015/2/6', '2015/2/7', '2015/2/8', '2015/2/9', '2015/2/10', '2015/2/11', '2015/2/12', '2015/2/13'],
  ydata: [
    [10452.74, 10409.85, 10367.41, 10554.96, 168890000],
    [10411.85, 10544.07, 10411.85, 10575.92, 221290000],
    [10543.85, 10538.66, 10454.37, 10584.07, 191460000],
    [10535.46, 10529.03, 10432, 10587.55, 225490000],
    [10530.07, 10592.44, 10480.59, 10651.99, 237770000],
    [10589.25, 10458.89, 10420.52, 10603.48, 223250000],
    [10461.55, 10485.18, 10389.85, 10543.03, 197960000],
    [10485.18, 10427.18, 10341.19, 10539.25, 197310000],
    [10428.67, 10538.37, 10426.89, 10573.85, 186280000],
    [10534.52, 10553.85, 10454.52, 10639.03, 260090000],
    [10556.37, 10600.51, 10503.7, 10666.88, 254170000],
    [10601.4, 10528.66, 10447.92, 10676.96, 224300000],
    [10522.77, 10623.62, 10453.11, 10665.7, 214920000],
    [10624.22, 10623.18, 10545.03, 10717.4, 219720000],
    [10625.25, 10568.29, 10490.14, 10691.77, 234260000],
    [10568, 10702.51, 10510.44, 10725.18, 186170000],
    [10701.1, 10609.92, 10579.33, 10748.81, 206560000],
    [10610.07, 10468.37, 10412.44, 10703.25, 247660000],
    [10467.41, 10510.29, 10369.92, 10611.56, 273970000],
    [10510.22, 10488.07, 10385.56, 10551.03, 208990000],
    [10487.78, 10499.18, 10395.55, 10614.44, 224800000],
    [10499.48, 10505.18, 10414.15, 10571.48, 183810000],
    [10503.11, 10470.74, 10394.81, 10567.85, 227760000],
    [10469.33, 10495.55, 10399.92, 10566.37, 187810000],
    [10494.89, 10593.03, 10433.7, 10634.81, 182880000],
    [10592, 10579.03, 10433.7, 10634.81, 160720000],
    [10578.74, 10613.85, 10511.18, 10667.03, 160590000],
    [10605.48, 10737.7, 10561.55, 10779.4, 277850000],
    [10735.18, 10694.07, 10636.44, 10775.03, 197560000],
    [10696.22, 10627.85, 10578.66, 10755.47, 208340000],
    [10628.88, 10714.88, 10628.88, 10762.07, 169730000],
    [10706.68, 10671.99, 10623.62, 10764.36, 164370000],
    [10674.59, 10664.73, 10626.44, 10794.95, 219890000],
    [10666.29, 10619.03, 10559.11, 10722.77, 220560000],
    [10619.55, 10609.62, 10508.89, 10711.84, 229950000],
    [10609.55, 10566.37, 10479.33, 10681.4, 225670000],
    [10566.59, 10601.62, 10509.4, 10660.73, 192420000],
    [10598.14, 10580.14, 10493.7, 10652.96, 223230000],
    [10581.55, 10583.92, 10519.03, 10689.55, 200050000],
    [10582.25, 10678.14, 10568.74, 10720.14, 185030000],
  ],
};


// 事件交互回调
onChartClick(params, echart) {
  console.log(params, echart);
}

calculateMA(dayCount, data) {
  const result = [];
  for (let i = 0, len = data.length; i < len; i++) {
    if (i < dayCount) {
      result.push('-');
    } else {
      let sum = 0;
      for (let j = 0; j < dayCount; j++) {
        sum += data[i - j][1];
      }
      result.push(sum / dayCount);
    }
  }
  return result;
}

ReactDOM.render(
  <KLineChart
    config={{
      x: { data: kData.xdata },
      y: {
        kData: kData.ydata,
        lineData: [
          this.calculateMA(5, kData.ydata),
          this.calculateMA(10, kData.ydata),
          this.calculateMA(20, kData.ydata),
        ],
        legend: ['日K', 'MA5', 'MA10', 'MA20'],
      },
    }}
    style={{ height: 450, width: '100%' }}
    onEvents={{ click: this.onChartClick }}
  />
, mountNode);
            `}
            </Highlight>
          </div>
        </Card>

        <Card>
          <KLineChart
            config={{
              x: { data: kData.xdata },
              y: {
                kData: kData.ydata,
                lineData: [
                  this.calculateMA(5, kData.ydata),
                  this.calculateMA(10, kData.ydata),
                  this.calculateMA(20, kData.ydata),
                ],
                legend: ['日K', 'MA5', 'MA10', 'MA20'],
              },
              volume: { show: true, data: kData.barData },
              upColor: '#F04B5B',
              downColor: '#2BBE65',
              dataZoom: {},
            }}
            style={{ height: 420, width: '100%' }}
            onEvents={{ click: this.onChartClick }}
          />
          <hr />
          <p className="sample-title">
            商业化K线图
            <Icon
              type="arrows-alt"
              title="Show me the code"
              onClick={this.onCodeToggleClick}
            />
          </p>
          <p className="sample-desc">装载数据，自定义上升下降颜色，显示下方volume柱状图，支持x轴及鼠标缩放</p>
          <div className="code-container">
            <Highlight className="JavaScript">{
              `import { KLineChart } from 'deep-viz';

// 创建虚假数据
const kData = {
  xdata: ['2015/1/5', '2015/1/6', '2015/1/7', '2015/1/8', '2015/1/9', '2015/1/10', '2015/1/11', '2015/1/12', '2015/1/13', '2015/1/14',
    '2015/1/15', '2015/1/16', '2015/1/17', '2015/1/18', '2015/1/19', '2015/1/20', '2015/1/21', '2015/1/22', '2015/1/23', '2015/1/24',
    '2015/1/25', '2015/1/26', '2015/1/27', '2015/1/28', '2015/1/29', '2015/1/30', '2015/1/31', '2015/2/1', '2015/2/2', '2015/2/3',
    '2015/2/4', '2015/2/5', '2015/2/6', '2015/2/7', '2015/2/8', '2015/2/9', '2015/2/10', '2015/2/11', '2015/2/12', '2015/2/13'],
  ydata: [
    [10452.74, 10409.85, 10367.41, 10554.96, 168890000],
    [10411.85, 10544.07, 10411.85, 10575.92, 221290000],
    [10543.85, 10538.66, 10454.37, 10584.07, 191460000],
    [10535.46, 10529.03, 10432, 10587.55, 225490000],
    [10530.07, 10592.44, 10480.59, 10651.99, 237770000],
    [10589.25, 10458.89, 10420.52, 10603.48, 223250000],
    [10461.55, 10485.18, 10389.85, 10543.03, 197960000],
    [10485.18, 10427.18, 10341.19, 10539.25, 197310000],
    [10428.67, 10538.37, 10426.89, 10573.85, 186280000],
    [10534.52, 10553.85, 10454.52, 10639.03, 260090000],
    [10556.37, 10600.51, 10503.7, 10666.88, 254170000],
    [10601.4, 10528.66, 10447.92, 10676.96, 224300000],
    [10522.77, 10623.62, 10453.11, 10665.7, 214920000],
    [10624.22, 10623.18, 10545.03, 10717.4, 219720000],
    [10625.25, 10568.29, 10490.14, 10691.77, 234260000],
    [10568, 10702.51, 10510.44, 10725.18, 186170000],
    [10701.1, 10609.92, 10579.33, 10748.81, 206560000],
    [10610.07, 10468.37, 10412.44, 10703.25, 247660000],
    [10467.41, 10510.29, 10369.92, 10611.56, 273970000],
    [10510.22, 10488.07, 10385.56, 10551.03, 208990000],
    [10487.78, 10499.18, 10395.55, 10614.44, 224800000],
    [10499.48, 10505.18, 10414.15, 10571.48, 183810000],
    [10503.11, 10470.74, 10394.81, 10567.85, 227760000],
    [10469.33, 10495.55, 10399.92, 10566.37, 187810000],
    [10494.89, 10593.03, 10433.7, 10634.81, 182880000],
    [10592, 10579.03, 10433.7, 10634.81, 160720000],
    [10578.74, 10613.85, 10511.18, 10667.03, 160590000],
    [10605.48, 10737.7, 10561.55, 10779.4, 277850000],
    [10735.18, 10694.07, 10636.44, 10775.03, 197560000],
    [10696.22, 10627.85, 10578.66, 10755.47, 208340000],
    [10628.88, 10714.88, 10628.88, 10762.07, 169730000],
    [10706.68, 10671.99, 10623.62, 10764.36, 164370000],
    [10674.59, 10664.73, 10626.44, 10794.95, 219890000],
    [10666.29, 10619.03, 10559.11, 10722.77, 220560000],
    [10619.55, 10609.62, 10508.89, 10711.84, 229950000],
    [10609.55, 10566.37, 10479.33, 10681.4, 225670000],
    [10566.59, 10601.62, 10509.4, 10660.73, 192420000],
    [10598.14, 10580.14, 10493.7, 10652.96, 223230000],
    [10581.55, 10583.92, 10519.03, 10689.55, 200050000],
    [10582.25, 10678.14, 10568.74, 10720.14, 185030000],
  ],
  barData: [
    [0, 168890000, 1],
    [1, 221290000, -1],
    [2, 191460000, 1],
    [3, 225490000, 1],
    [4, 237770000, -1],
    [5, 223250000, 1],
    [6, 197960000, -1],
    [7, 197310000, 1],
    [8, 186280000, -1],
    [9, 260090000, -1],
    [0, 168890000, 1],
    [10, 254170000, -1],
    [11, 224300000, 1],
    [12, 214920000, -1],
    [13, 219720000, 1],
    [14, 234260000, 1],
    [15, 186170000, -1],
    [16, 206560000, 1],
    [17, 247660000, 1],
    [18, 273970000, -1],
    [19, 208990000, 1],
    [20, 224800000, -1],
    [21, 183810000, -1],
    [22, 227760000, 1],
    [23, 187810000, -1],
    [23, 187810000, -1],
    [24, 182880000, -1],
    [25, 160720000, 1],
    [26, 160590000, -1],
    [27, 277850000, -1],
    [28, 197560000, 1],
    [29, 208340000, 1],
    [30, 169730000, -1],
    [31, 164370000, 1],
    [32, 219890000, 1],
    [33, 220560000, 1],
    [34, 229950000, 1],
    [35, 225670000, 1],
    [36, 192420000, -1],
    [37, 223230000, 1],
    [38, 200050000, -1],
    [39, 185030000, -1],
  ],
};


// 事件交互回调
onChartClick(params, echart) {
  console.log(params, echart);
}

calculateMA(dayCount, data) {
  const result = [];
  for (let i = 0, len = data.length; i < len; i++) {
    if (i < dayCount) {
      result.push('-');
    } else {
      let sum = 0;
      for (let j = 0; j < dayCount; j++) {
        sum += data[i - j][1];
      }
      result.push(sum / dayCount);
    }
  }
  return result;
}

ReactDOM.render(
  <KLineChart
    config={{
      x: { data: kData.xdata },
      y: [
        { data: [kData.ydata, this.calculateMA(5,kData.ydata), this.calculateMA(10,kData.ydata), this.calculateMA(20,kData.ydata)],
          legend: ['日K', 'MA5', 'MA10', 'MA20'],
          type: ['candlestick', 'line', 'line', 'line'],
        }
      ],
      bar:{ data: kData.barData },
      dataZoom: { start: 10, end: 50 },
    }}
    style={{ height: 450, width: '100%' }}
    onEvents={{ click: this.onChartClick }}
    onTooltipFormat={this.onTooltipFormat}
  // />
, mountNode);
            `}
            </Highlight>
          </div>
        </Card>

        <p className="container-title">API</p>
        {this._renderAPI(tableConfig)}
      </div>
    );
  }
}
